// First, pass in the important variables.
.adaptive_placeholder(@height, @radius, @margin: 1em, @border: 1px) {
    @borders: (@border * 2); // <- To avoid repeating below
    box-sizing: border-box;  // <- Important for accurate sizing
    width: 100%;             // <- Could be almost anything
    height: ~"calc(@{height} + @{borders})";
    margin: 0 0 @margin;
    padding: @margin;
    border: @border solid #ccc;
    border-radius: @radius;
    background: #fff;
    resize: none;  // <- For textareas
    outline: none; // <- Because ugly
    //
    // Following block controls all the color change
    //
    &[required] {
        &:focus {
            border-color: #00bafa;
            + label {
                &[placeholder] {
                    &:before {
                        color: #00bafa;
                    }
                }
            }
        }
        //
        // Following block selects label directly adjacent to input
        //
        &:focus,
        &:valid {
            + label {
                &[placeholder] {
                    &:before {
                        transition-duration: .2s;
                        //
                        // Following lines move placeholder out of the way
                        //
                        transform: translate(0, (@margin * -1.5)) scale(.9, .9);
                    }
                }
            }
        }
        //
        // Following block injects string from label's 'alt' attr.
        // It comes before the other 'content' property so I can
        // override it. Uses "invalid" pseudo-selector to know
        // when to do that.
        //
        &:invalid {
            + label {
                &[placeholder] {
                    &[alt] {
                        &:before {
                            content: attr(alt); // Content property 1 of 2
                        }
                    }
                }
            }
        }
        + label {
            &[placeholder] {
                display: block;
                pointer-events: none; // Allows clicking thru label
                line-height: @margin * 1.25;
                // Following pulls label into position
                margin-top: ~"calc(-@{height} - @{borders})";
                // Following offsets that above
                margin-bottom: ~"calc((@{height} - @{margin}) + @{borders})";
                //
                // Following ':before' is needed to switch between
                // different strings.
                //
                &:before {
                    content: attr(placeholder); // Content property 2 of 2
                    display: inline-block;
                    margin: 0 ~"calc(@{margin} + @{borders})";
                    padding: 0 2px;
                    color: #898989;
                    white-space: nowrap;
                    transition: .3s ease-in-out;
                    //
                    // Following lines lets me use solid color as bkg img.
                    // This lets me size bkg to something more sublte
                    //
                    background-image: linear-gradient(to bottom, #fff, #fff);
                    background-size: 100% 5px;
                    background-repeat: no-repeat;
                    background-position: center;
                }
            }
        }
    }
}
//
// Following block is how I call the above function
//
input {
    @height: 3em;
    &[type="text"] {
        .adaptive_placeholder(@height, (@height / 2));
    }
}

/**
 * A mixin which helps you to add depth to elements according to the Google Material Design spec:
 * http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality
 *
 * Please note that the values given in the specification cannot be used as is. To create the same
 * visual experience the blur parameter has to be doubled.
 *
 * Author: Florian Kutschera (@gefangenimnetz), Conceptboard GmbH (@conceptboardapp)
 *
 * Example usage:
 *
 * .card {
 *     width: 95px;
 *     height: 95px;
 *     background: #f4f4f4;
 *     -webkit-transition: all 250ms;
 *     -moz-transition: all 250ms;
 *     transition: all 250ms;
 *     .boxshadow(1);
 *     &:hover {
 *         .boxshadow(3);
 *         -webkit-transform: translateY(-5px);
 *         -moz-transform: translateY(-5px);
 *         transform: translateY(-5px);
 *     }
 * }
 *
 */

.boxshadow(@level: 1) {
    & when (@level = 1) {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
    }

    & when (@level = 2) {
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    }

    & when (@level = 3) {
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
    }

    & when (@level = 4) {
        box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);
    }

    & when (@level = 5) {
        box-shadow: 0 19px 38px rgba(0, 0, 0, 0.30), 0 15px 12px rgba(0, 0, 0, 0.22);
    }
}

/*
 * Clearfix: contain floats
 * Uses "display: flow-root" in browsers that supports it
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 *
 * Source: http://nicolasgallagher.com/micro-clearfix-hack/
 */

.clearfix() {
    &:before,
    &:after {
        content: ' '; // 1
        display: table; // 2
    }

    &:after {
        clear: both;
    }

    @supports (display: flow-root) {
        display: flow-root;

        &:before,
        &:after {
            content: none;
        }
    }
}

/**
 * other mixins
 */

.colorVar (@property, @cssvar, @color) {
    @{property}: @color;
    @{property}: var(@cssvar);
}

.font-face (@family, @file-base, @weight: normal, @style: normal) {
    @font-face {
        font-family: @family;
        src: url('@{file-base}.woff') format('woff'),
             url('@{file-base}.woff2') format('woff2'),
             url('@{file-base}.ttf') format('truetype');
        font-weight: @weight;
        font-style: @style;
    }
}

.transform (property) {
    transition: property 0.125s ease-in-out;
}

.vertical-align () {
    top: 50%;
    transform: translateY(-50%);
}
